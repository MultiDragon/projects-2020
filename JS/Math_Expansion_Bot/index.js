const Discord = require("discord.js")
const Client = new Discord.Client()
const https = require("https")
const { google } = require("googleapis")
const fs = require("fs")

const commands = []
const prefix = "!"
const commandDescriptions = []

const categories = []
let currentCategory = ""

const emojis = {
	tick: "‚úÖ",
	cross: "‚ùé",
	red_square: "üü•",
	done: "üëç",
	green_square: "üü©"
}

function createCommand(id, func, exec, desc, minArgs = 0, botchannel = false) {
	commands[id] = function(req) {
		var res = req.content.split(" ")
		res[0] = res[0].substring(1)
		if (res.length <= minArgs) {
			req.reply("\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º " + minArgs + ", –ø–æ–ª—É—á–µ–Ω–æ " + (res.length - 1) + ")!")
			return
		}
		if (!req.channel.guild || !req.channel.guild.available) {
			req.reply("\n–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ!")
			return
		}

		if (!botchannel || req.channel.name.indexOf("bot") >= 0)
			func(req, res)
	}

	exec = `**\`${prefix}${id}${minArgs ? " " : ""}${exec}\`**`

	commandDescriptions[currentCategory].push(exec + " - " + desc)
	console.log("Added !" + id + " command")
}

function addCategory(desc) {
	currentCategory = desc
	categories.push(desc)
	commandDescriptions[currentCategory] = []
}

function sendEmbed(channel, title, description, arr = {}) {
	arr.title = title
	arr.description = description
	channel.send({
		embed: arr
	})
}

function smartDate(text) {
	const tsplit = text.split("/")
	const date = tsplit[0]
	const time = tsplit[1] ? tsplit[1] : date

	const todaynow = new Date()
	let todaypoint = Date.now()
	if (date === "tomorrow")
		todaypoint += 86400000

	const parsedDate = Date.parse(date + "T00:00:00.000+03:00")
	if (parsedDate > 0) {
		const days = new Date(todaynow.toDateString() + " GMT+0300")
		todaypoint += parsedDate - days
	}

	const timeSplit = time.split(":")
	const hours = parseInt(timeSplit[0])
	const minutes = parseInt(timeSplit[1])
	if (timeSplit.length === 2 && !isNaN(hours) && !isNaN(minutes)) {
		let parsedTime = Number(new Date(todaynow.toDateString() + " GMT+0300"))
		parsedTime += 60000 * (60 * hours + minutes)
		todaypoint += parsedTime - Date.now()
	}

	return todaypoint + 100
}

function smartDateText(date) {
	const dateobj = new Date(date + 10800000)
	return new Intl.DateTimeFormat("ru", {
		year: "numeric",
		month: "numeric",
		day: "numeric",
		hour: "numeric",
		minute: "numeric",
		timeZone: "UTC"
	}).format(dateobj)
}

let gmap = {}

function doRequest(options, input = false) {
	return new Promise((resolve, reject) => {
		const req = https.request(options, connection => {
			let data = ""
			connection.on("data", x => { data += x })
			connection.on("end", () => resolve(data))
		})

		req.on("error", err => {
			reject(err)
		})

		if (input)
			req.write(input)
		req.end()
	})
}

function parseJSON(str) {
	try {
		return JSON.parse(str)
	} catch (e) {
		return null
	}
}

async function generateGoogleAuth() {
	try {
		const cred = await parseJSON(fs.readFileSync("credentials.json"))
		const token = await parseJSON(fs.readFileSync("token.json"))
		const { client_secret, client_id, redirect_uris } = cred.installed
		const client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0])
		client.setCredentials(token)
		return client
	} catch(e) {
		console.error(e)
		process.exit(1)
	}
}

async function readSheet(id, table) {
	try {
		const auth = await generateGoogleAuth()
		const sheets = google.sheets({ version: "v4", auth: auth })
		const result = await sheets.spreadsheets.values.get({ spreadsheetId: id, range: `${table}!A1:ZZ1000`, auth: auth })
		return result.data.values
	} catch(e) {
		console.log(e)
		return null
	}
}

function makeLetters(num) {
	let str = "";
	while (num > 0) {
		str = String.fromCharCode(65 + (num - 1) % 26) + str
		num = Math.floor((num - 1) / 26)
	}
	return str;
}

function getCell(row, column) {
	return makeLetters(parseInt(column) + 1) + String(parseInt(row) + 1)
}

async function writeSheet(id, table, row, column, value, input = false) {
	try {
		const auth = await generateGoogleAuth()
		const sheets = google.sheets({ version: "v4", auth: auth })
		const cell = getCell(row, column)
		const result = await sheets.spreadsheets.values.update({
			spreadsheetId: id,
			range: `${table}!${cell}`,
			valueInputOption: input ? "USER_ENTERED" : "RAW",
			auth: auth,
			resource: { values: [[value]] }
		})
		
		return true
	} catch(e) {
		console.log(e)
		return false
	}
}

async function importSheet(id, table, row, column, id2, table2, startx, starty, endx, endy) {
	const start2 = getCell(startx, starty)
	const end2 = getCell(endx, endy)
	const value = `=IMPORTRANGE("https://docs.google.com/spreadsheets/d/${id2}", "${table2}!${start2}:${end2}")`
	return await writeSheet(id, table, row, column, value, true)
}

async function createSpreadsheet(name) {
	try {
		const resource = { properties: { title: name }}
		const auth = await generateGoogleAuth()
		const sheets = google.sheets({ version: "v4", auth: auth })
		const result = await sheets.spreadsheets.create({ resource: resource, fields: "spreadsheetId", auth: auth })

		const id = result.data.spreadsheetId
		const drive = google.drive({ version: "v3", auth: auth })
		await drive.permissions.create({ fileId: id, requestBody: { role: "reader", type: "anyone" }})
		return id
	} catch(e) {
		console.log(e)
		return false
	}
}

async function makeSheet(id, table) {
	try {
		const resource = { requests: [{ addSheet: {properties: { title: table }}}]}
		const auth = await generateGoogleAuth()
		const sheets = google.sheets({ version: "v4", auth: auth })
		const result = await sheets.spreadsheets.batchUpdate({ resource: resource, spreadsheetId: id, auth: auth })
		return result.data.spreadsheetId
	} catch(e) {
		console.log(e)
		return false
	}
}

function setChannel(key, req, res) {
	const kk = req.guild.id
	gmap[kk][`${key}Channel`] = res[1].slice(2, -1)
}

const colorMap = {
	"–∫—Ä–∞—Å–Ω": ["FF0000", 0],
	"–æ—Ä–∞–Ω–∂–µ–≤": ["FF8000", 0],
	"–∂–µ–ª—Ç": ["DDDD00", 0],
	"–∑–µ–ª–µ–Ω": ["33CC00", 0],
	"–≥–æ–ª—É–±": ["00CCCC", 0],
	"—Å–∏–Ω": ["0000FF", 1],
	"–ø—É—Ä–ø—É—Ä–Ω": ["CC00FF", 0],
	"—Ñ–∏–æ–ª–µ—Ç–æ–≤": ["990099", 0],
	"—Å–µ—Ä": ["AAAAAA", 0],
	"–∫–æ—Ä–∏—á–Ω–µ–≤": ["995000", 0],
	"–±–∏—Ä—é–∑–æ–≤": ["33CCCC", 0],
	"–æ–ª–∏–≤–∫–æ–≤": ["808000", 0]
}

function getColor(name) {
	name = name.replace("—ë", "–µ").slice(0, -2).toLowerCase()
	if (!colorMap[name]) return false
	const color = colorMap[name][0]
	name = name[0].toUpperCase() + name.slice(1) + (colorMap[name][1] === 1 ? "—è—è" : "–∞—è")
	return [ name, color ]
}

const max = ["VIEW_CHANNEL"]
async function initRole(guild, name, ls_cat, glo_cat) {
	[ name, color ] = getColor(name)
	try {
		const role = await guild.roles.create({ data: { name: `–ú–≠ - ${name}`, color: color, hoist: true }})
		const role_id = guild.roles.resolveID(role)
		const everyone = await guild.roles.everyone
		const everyone_id = guild.roles.resolveID(everyone)
		const perms = [{ id: everyone_id, deny: max }, { id: role_id, allow: max }]
		await guild.channels.create(`–ú–≠ - ${name} - –õ–°`, { permissionOverwrites: perms, parent: ls_cat })
		await guild.channels.create(`–ú–≠ - ${name} - –õ–° - –≥–æ–ª–æ—Å`, { type: "voice", permissionOverwrites: perms, parent: ls_cat })
	} catch(e) {
		console.log(e)
	}
}

async function init(req, res, sensible) {
	const result = await readSheet(res[1], "users")
	if (!result)
		req.reply("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
	else {
		const key = req.guild.id
		gmap[key].spreadsheet = res[1]
		if (sensible) ls_cat = await req.guild.channels.create("–ú–≠ - –õ–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã", { type: "category" })
		if (sensible) glo_cat = await req.guild.channels.create("–ú–≠ - –°–¥–∞—á–∞ –∑–∞–¥–∞—á –∫–æ–º–∞–Ω–¥–∞–º", { type: "category" })
		gmap[key].teams = {}
		let count = 0
		for (let i of result) {
			let j = 0
			if (sensible) initRole(req.guild, i[0], ls_cat, glo_cat)
			const arr = []
			while (i[++j])
				arr.push(i[j])
			gmap[key].teams[getColor(i[0])[0]] = arr
			count++
		}
		req.reply(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Å–æ–∑–¥–∞–Ω–æ ${count} –∫–æ–º–∞–Ω–¥`)
	}
}

Client.on("ready", async() => {
	addCategory("–†–∞–∑–Ω–æ–µ")
	createCommand("init", async(req, res) => {
		if (res[2] === "abcdefgh")
			init(req, res, true)
		else
			init(req, res, false)
	}, "<spreadsheet_id> [abcdefgh]", "–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É", 1, true)
	
	createCommand("qinit", async(req, res) => {
		init(req, res, false)
	}, "<spreadsheet_id>", "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ –ø–∞–º—è—Ç—å", 1)

	createCommand("initChannels", async(req, res) => {
		if (res[1] !== "abcdefgh")
			req.reply("–ù–µ –≤—ã–¥–∞–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
		else {
			const channels = req.guild.channels
			const ch_cat = await channels.create("–ú–≠ - –ö–∞–Ω–∞–ª—ã –∏–≥—Ä—ã", { type: "category" })
			const ch_welcome = await channels.create("–ú–≠ - –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", { parent: ch_cat })
			const ch_queue = await channels.create("–ú–≠ - –û—á–µ—Ä–µ–¥—å", { parent: ch_cat })
			const ch_buy = await channels.create("–ú–≠ - –ü–æ–∫—É–ø–∫–∞ –∑–∞–¥–∞—á", { parent: ch_cat })
			
			const everyone = await req.guild.roles.everyone
			const everyone_id = req.guild.roles.resolveID(everyone)
			const perms = [{ id: everyone_id, deny: max }]
			const perms2 = [{ id: everyone_id, deny: ["SEND_MESSAGES"] }]
			const orgchannel = await channels.create("–ú–≠ - –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", { parent: ch_cat, permissionOverwrites: perms2 })
			
			const embed = new Discord.MessageEmbed()
				.setColor(0x00AE86)
				.setTitle("–ü—Ä–∞–≤–∏–ª–∞ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≠–∫—Å—Ç—Ä–∏–º-–º–∞–≥–∞–∑–∏–Ω–∞")
				.setFooter("–ë–æ—Ç –º–∞—Ç–∏–≥—Ä ¬© Wizzerine 2020")
				.setTimestamp()

			const welcome_id = req.guild.channels.resolveID(ch_welcome)
			const queue_id = req.guild.channels.resolveID(ch_queue)
			const buy_id = req.guild.channels.resolveID(ch_buy)
			embed.addField("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞", `–ï—Å–ª–∏ –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è, –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –≤ –∫–∞–Ω–∞–ª <#${welcome_id}>. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —ç—Ç–æ —Ñ–∞–º–∏–ª–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ \`–ò–≤–∞–Ω–æ–≤\` –∏–ª–∏ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ \`–ò–≤–∞–Ω\`. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è, –∑–Ω–∞—á–∏—Ç, —Ç–∞–∫–æ–µ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–æ–ª—å –Ω—É–∂–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∏ –¥–æ—Å—Ç—É–ø –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª—ã –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã.`)
			embed.addField("–ó–∞–¥–∞—á–∏", "–ï—Å—Ç—å –∑–∞–¥–∞—á–∏ –≤ —à–µ—Å—Ç–∏ –±–ª–æ–∫–∞—Ö: –º–µ—Ç–æ–¥—ã \`M\`, –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∞ \`C\`, —á–∏—Å–ª–∞ \`N\`, –∞–ª–≥–µ–±—Ä–∞ \`A\`, –≥—Ä–∞—Ñ—ã \`G\` –∏ –º–∞—Ç–∞–Ω–∞–ª–∏–∑ \`L\`. –í –∫–∞–∂–¥–æ–π —Ç–µ–º–µ 5 –∑–∞–¥–∞—á, –∑–∞–¥–∞—á–∏ –Ω–µ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è –¥–µ–ª–∞—é—Ç—Å—è —Ç–∞–∫: \`N1\`, \`A3\` –∏ —Ç.–ø., –¥–∞–ª–µ–µ —ç—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–æ–º–µ—Ä–æ–º. –£ –≤–∞—Å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–∫—É–ø–∫–µ –≤—Å–µ—Ö —ç—Ç–∏—Ö –∑–∞–¥–∞—á –∏ 13 –∫—Ä–µ–¥–∏—Ç–æ–≤. –£ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –µ—Å—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –∫—Ä–µ–¥–∏—Ç–∞—Ö: –ø–æ–∫—É–ø–∫–∞ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ —Å—Ç–æ–∏—Ç N –∫—Ä–µ–¥–∏—Ç–æ–≤, –∑–∞ –µ—ë –≤–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 3N –∫—Ä–µ–¥–∏—Ç–æ–≤, –∞ –∑–∞ –∫–∞–∂–¥—É—é –Ω–µ–≤–µ—Ä–Ω—É—é —Å–¥–∞—á—É –ø–æ—Ç–µ—Ä—è–µ—Ç–µ 1 –∫—Ä–µ–¥–∏—Ç (–µ—Å–ª–∏ —É –≤–∞—Å –∫—Ä–µ–¥–∏—Ç–æ–≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –Ω–æ–≤—ã–µ). –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Ç–≤–µ—Ç (–æ–Ω–∏ –≤—ã–¥–µ–ª—è—é—Ç—Å—è –∑–≤—ë–∑–¥–æ—á–∫–æ–π –≤ —É—Å–ª–æ–≤–∏–∏, –Ω–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫–∏–µ), –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –∏—Ö –Ω–µ–ª—å–∑—è –ø–æ–∫—É–ø–∞—Ç—å, –ø–æ–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è.")
			embed.addField("–ü—Ä–æ—Ü–µ—Å—Å –∏–≥—Ä—ã", `–í –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç –º–µ–Ω—è —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, —Ç.–µ. —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥, —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á (–±–µ–∑ —É—Å–ª–æ–≤–∏–π) –∏ —Ä–∞–∑–±–∞–ª–ª–æ–≤–∫–æ–π —ç—Ç–∏—Ö –∑–∞–¥–∞—á, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã. –ö–æ–≥–¥–∞ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å –∑–∞–¥–∞—á—É, –Ω–∞–ø–∏—à–∏—Ç–µ –µ—ë –Ω–æ–º–µ—Ä –≤ –∫–∞–Ω–∞–ª <#${queue_id}>. –ö –≤–∞–º –≤ –ª–∏—á–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –ø—Ä–∏–¥—ë—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –ø—Ä–∏–º–µ—Ç –∏–ª–∏ –Ω–µ –ø—Ä–∏–º–µ—Ç –∑–∞–¥–∞—á—É (–≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–∞–≤–∞—Ç—å –µ—ë –≤—Å–µ–π –∫–æ–º–∞–Ω–¥–æ–π), –∏ –µ—Å–ª–∏ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ–µ, —è —Å–∫–∞–∂—É –≤–∞–º –æ–± —ç—Ç–æ–º.`)
			embed.addField("–ü–æ–∫—É–ø–∫–∞ –∑–∞–¥–∞—á", `–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–∞–¥–∞—á –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å, –≤ –∫–∞–Ω–∞–ª <#${buy_id}>. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–ª–µ—Ç–∫–µ —Å –∑–∞–¥–∞—á–µ–π –∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –µ—ë –ø–æ–∫—É–ø–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏ –≤ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.`)
			embed.addField("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º", `–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–±–æ–∑–Ω–∞—á–∏—Ç—å, —á—Ç–æ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –∑–∞–¥–∞—á—É, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ—á—Ç–∏ –ª—é–±—É—é emoji-—Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ <#${queue_id}>. –ß–µ—Ç—ã—Ä–µ —Ä–µ–∞–∫—Ü–∏–∏ –∏–º–µ—é—Ç –æ—Å–æ–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∏—Ö –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–¥–∞—á–∏:\n\`:white_check_mark:\` :white_check_mark: –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–¥–∞–Ω–∞.\n\`:negative_squared_cross_mark:\` :negative_squared_cross_mark: –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤ —Ä–µ—à–µ–Ω–∏–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞.\n\`:red_square:\` :red_square: –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º –±—ã–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ (–≤ –Ω—ë–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä), –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º –ø—Ä–∏–¥—ë—Ç –≤ –õ–° —Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.\n\`:green_square:\` :green_square: –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –≠—Ç–æ—Ç emoji –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –Ω–æ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è.`)
			orgchannel.send({ embed })

			await channels.create("–ú–≠ - –í–æ–ø—Ä–æ—Å—ã", { parent: ch_cat })
			await channels.create("–ú–≠ - –ò—Ç–æ–≥–∏ –∏–≥—Ä—ã", { parent: ch_cat, type: "voice" })
			await channels.create("–ú–≠ - –ñ—é—Ä–∏", { parent: ch_cat, type: "voice", permissionOverwrites: perms })

			await req.guild.roles.create({ data: { name: "–ú–≠ - –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", color: "FFFFFF", permissions: ["ADMINISTRATOR"], hoist: true }})

			req.reply("–ö–∞–Ω–∞–ª—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
		}
	}, "abcdefgh", "–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã", 1, true)

	createCommand("clean", async(req, res) => {
		if (res[1] !== "abcdefgh")
			req.reply("–ù–µ –≤—ã–¥–∞–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
		else {
			const roles = await req.guild.roles.fetch()
			roles.cache.each(i => { if (i.name.slice(0, 2).toUpperCase() === "–ú–≠") i.delete() })
			const channels = req.guild.channels.cache
			channels.each(i => { if (i.name.slice(0, 2).toUpperCase() === "–ú–≠") i.delete() })
			req.reply("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
		}
	}, "abcdefgh", "–æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ", 1, true)
})

function processMessage(req) {
	const msg = req.content.split(" ")
	if (msg[0][0] !== prefix) return
	msg[0] = msg[0].substring(1)

	if (commands[msg[0]])
		commands[msg[0]](req)
}

const filter = (reaction, user) => {
	return reaction.emoji.name === emojis.tick || reaction.emoji.name === emojis.cross || reaction.emoji.name === emojis.red_square
}

Client.on("message", async req => {
	if (req.author.bot) return

	const key = req.guild.id
	if (!gmap[key])
		gmap[key] = {}

	processMessage(req)
	if (req.channel.name === "–º—ç-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è") {
		if (!gmap[key].teams)
			req.reply("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
		else {
			const teams = gmap[key].teams
			let good = false
			for (let team in teams) {
				if (good) break
				for (let person of teams[team])
					if (person === req.content) {
						good = true
						req.react(emojis.done)
						await req.member.roles.remove(req.member.roles.cache)
						const color = getColor(team)[0]
						const role = await req.guild.roles.cache.find(x => x.name === `–ú–≠ - ${team}`)
						if (!role) req.reply("–û—à–∏–±–∫–∞")
						req.member.roles.add(role)
						req.member.setNickname(`${color} - ${person}`).catch(() => {}) // –∞–¥–º–∏–Ω—É –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∏–∫
						break
					}
			}
			if (!good)
				req.delete()
		}
	} else if (req.channel.name === "–º—ç-–æ—á–µ—Ä–µ–¥—å") {
		req.awaitReactions(filter, { max: 1, time: 1800000, errors: ["time"] })
			.then(async collected => {
				const key = req.guild.id
				const role = await req.member.roles.cache.find(x => x.name.slice(0, 2) === "–ú–≠")
				if (!role) return
				const color = role.name.slice(5)
				const reaction = collected.keyArray()[0]
				if (reaction === emojis.red_square) {
					const str = `–í—ã –ø—ã—Ç–∞–ª–∏—Å—å —Å–¥–∞—Ç—å –∑–∞–¥–∞—á—É ${req.content}, –Ω–æ —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ—Ç –∏–ª–∏ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –±—ã–ª –Ω–µ–≤–µ—Ä–µ–Ω`
					const channel = await req.guild.channels.cache.find(x => x.name === `–º—ç-${color}-–ª—Å`)
					if (channel) channel.send(str)
					else req.reply(str)
				}

				const sheet_id = gmap[key].spreadsheet
				const result = await readSheet(sheet_id, "territories")
				if (!result) req.channel.send(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á–∏ ${req.content} –æ—Ç ${req.author}`)
				else {
					let row = -1
					for (let i in result)
						if (result[i][0] === color) {
							row = i
							break
						}

					if (row < 0) req.channel.send(`–ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${req.content} –æ—Ç ${req.author} –æ–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ –∞–≤—Ç–æ—Ä –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ`)

					let column = -1
					for (let i in result[0])
						if (result[0][i] === req.content) {
							column = i
							break
						}
					if (column < 0) req.channel.send(`–ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${req.content} –æ—Ç ${req.author} –æ–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ –∑–∞–¥–∞—á–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
					if (row < 0 || column < 0)
						return
					if (result[row][column] && parseInt(result[row][column]) > 0)
						req.channel.send(`–ü—Ä–æ–≤–µ—Ä–∫–∞ ${req.content} –æ—Ç ${req.author} –æ—Ç–º–µ–Ω–µ–Ω–∞`)
					else if (reaction === emojis.tick)
						await writeSheet(sheet_id, "territories", row, column, !result[row][column] ? 1 : 1 - parseInt(result[row][column]))
					else if (reaction === emojis.cross)
						await writeSheet(sheet_id, "territories", row, column, !result[row][column] ? -1 : parseInt(result[row][column]) - 1)
					req.react(emojis.green_square)
				}
			}).catch(collected => console.log(collected) || req.channel.send(`–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –∫ —Ä–µ—à–µ–Ω–∏—é ${req.content} –æ—Ç ${req.author}, —è –∑–∞–∫—Ä—ã–≤–∞—é—Å—å`))

		const key = req.guild.id
		const sheet_id = gmap[key].spreadsheet
		const result = await readSheet(sheet_id, "territories")
		if (!result) req.react(emojis.red_square)
		else {
			let good = false
			for (let i in result[0])
				if (result[0][i] === req.content) {
					good = true
					break
				}
			if (!good) req.react(emojis.red_square)
		}
	} else if (req.channel.name === "–º—ç-–ø–æ–∫—É–ø–∫–∞-–∑–∞–¥–∞—á") {
		const key = req.guild.id
		const sheet_id = gmap[key].spreadsheet
		if (!sheet_id) {
			req.react(emojis.red_square)
			return
		}
		const result = await readSheet(sheet_id, "territories")
		if (!result) req.react(emojis.red_square)
		else {
			let good = false, column = false
			for (let i in result[0])
				if (result[0][i] === req.content) {
					good = parseInt(result[1][i])
					column = i
					break
				}
			if (!good || isNaN(good)) {
				req.react(emojis.red_square)
				return
			}

			const role = await req.member.roles.cache.find(x => x.name.slice(0, 2) === "–ú–≠")
			if (!role) return
			const color = role.name.slice(5)
			let row = -1
			for (let i in result)
				if (result[i][0] === color) {
					row = i
					break
				}
			if (!row) {
				req.react(emojis.red_square)
				return
			}

			let current_count = result[row]
			current_count = parseInt(current_count[current_count.length - 2])
			if (current_count < good) {
				req.react(emojis.cross)
				return
			}

			if (!isNaN(parseInt(result[row][column]))) {
				req.react(emojis.cross)
				return
			}

			await writeSheet(sheet_id, "territories", row, column, 0)
			req.react(emojis.green_square)

			for (let i in result)
				if (result[i][0] === "—É—Å–ª–æ–≤–∏—è") {
					row = i
					break
				}

			const channel = await req.guild.channels.cache.find(x => x.name === `–º—ç-${color.toLowerCase()}-–ª—Å`)
			const embed = new Discord.MessageEmbed()
				.setImage(result[row][column])
				.addField(`–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–¥–∞—á–∏`, `${good} –∫—Ä–µ–¥–∏—Ç–æ–≤`)
				.addField(`–ë–∞–ª–∞–Ω—Å`, `${current_count - good} –∫—Ä–µ–¥–∏—Ç–æ–≤`)
			channel.send(embed)
		}
	}
})

const key = fs.readFileSync("key.txt").toString()
Client.login(key)
